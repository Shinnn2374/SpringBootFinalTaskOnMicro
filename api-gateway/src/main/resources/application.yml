server:
  port: 8765

spring:
  application:
    name: api-gateway
  cloud:
    gateway:
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true
      server:
        webmvc:
          routes:
          - id: auth-service
            uri: lb://auth-service
            predicates:
              - Path=/auth/**
            filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 10
                redis-rate-limiter.burstCapacity: 20
                redis-rate-limiter.requestedTokens: 1
            - name: CircuitBreaker
              args:
                name: authService
                fallbackUri: forward:/fallback/auth

          - id: user-service-public
            uri: lb://user-service
            predicates:
              - Path=/api/users/register
            filters:
            - StripPrefix=1

          - id: user-service-secured
            uri: lb://user-service
            predicates:
              - Path=/api/users/**
            filters:
            - name: AuthFilter
            - StripPrefix=1
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
                redis-rate-limiter.requestedTokens: 1

          - id: task-service
            uri: lb://task-service
            predicates:
              - Path=/api/tasks/**
            filters:
            - name: AuthFilter
            - StripPrefix=1
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 20
                redis-rate-limiter.burstCapacity: 40
                redis-rate-limiter.requestedTokens: 1
            - name: CircuitBreaker
              args:
                name: taskService
                fallbackUri: forward:/fallback/task

      default-filters:
        - AddRequestHeader=X-Gateway-Request-Time, ${#request.timestamp}
        - AddResponseHeader=X-Gateway-Response-Time, ${#response.timestamp}

  data:
    redis:
      host: localhost
      port: 6379
      password:
      database: 0

  resilience4j:
    circuitbreaker:
      instances:
        authService:
          registerHealthIndicator: true
          slidingWindowSize: 10
          minimumNumberOfCalls: 5
          waitDurationInOpenState: 10000
          failureRateThreshold: 50
        taskService:
          registerHealthIndicator: true
          slidingWindowSize: 10
          minimumNumberOfCalls: 5
          waitDurationInOpenState: 10000
          failureRateThreshold: 50

  management:
    endpoints:
      web:
        exposure:
          include: health, info, metrics, gateway
    endpoint:
      health:
        show-details: always
    metrics:
      tags:
        application: ${spring.application.name}

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
  instance:
    instance-id: ${spring.application.name}:${random.uuid}
    prefer-ip-address: true
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10

logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    com.example.apigateway: DEBUG
    reactor.netty: WARN
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"

gateway:
  auth:
    service-url: http://auth-service
    validate-token-endpoint: /auth/validate
  rate-limit:
    enabled: true
    global-requests-per-second: 100
  cors:
    allowed-origins: "*"
    allowed-methods: GET,POST,PUT,DELETE,OPTIONS
    allowed-headers: "*"
    allow-credentials: true